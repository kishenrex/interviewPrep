#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST .01

// 2D rotation function
mat2 rot2D(float a) {
    return mat2(cos(a), -sin(a), sin(a), cos(a));
}

// Custom gradient
vec3 palette(float t) {
    return .5+.5*cos(6.28318*(t+vec3(.3,.416,.557)));
}

// Signed distance function for a box
float sdBox( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float GetDist(vec3 p) {
  vec4 s = vec4(0, 1, 6, 1); // Sphere position and radius

  float sphereDist = length(p - s.xyz) - s.w;  
  float planeDist = p.y; // Plane at y=0
  
  // Add a box
  vec3 boxPos = vec3(3.0, 1.0, 5.0);
  float boxDist = sdBox(p - boxPos, vec3(1.0, 1.0, 1.0));

  // Add a torus
  vec3 torusPos = vec3(-2.0, 1.0, 7.0);
  vec2 torusParams = vec2(1.0, 0.3); // Outer and inner radius
  float torusDist = length(vec2(length(p.xz - torusPos.xz) - torusParams.x, p.y - torusPos.y)) - torusParams.y;

  return min(sphereDist, min(planeDist, min(boxDist, torusDist))); 
}

float RayMarch(vec3 ro, vec3 rd) {
  float dO = 0.;

  for(int i=0;i<MAX_STEPS; i++) {
    vec3 p = ro + rd*dO;
    float dS = GetDist(p);
    dO += dS;
    if(dO>MAX_DIST || dS<SURF_DIST) break;
  }
  
  return dO;
}

vec3 GetNormal(vec3 p) {
  float d = GetDist(p);
  vec2 e = vec2(.01, 0);
  
  vec3 n = d - vec3(
    GetDist(p-e.xyy),
    GetDist(p-e.yxy),
    GetDist(p-e.yyx));
    
  return normalize(n);
}

float GetLight(vec3 p) {
  vec3 lightPos = vec3(0, 5, 6);
  lightPos.xz += vec2(cos(iTime * 0.5), sin(iTime * 0.7)) * 3.0; 

  vec3 l = normalize(lightPos-p);
  vec3 n = GetNormal(p);
  
  float dif = clamp(dot(n,l), 0., 1.);

  // Shadows
  float d = RayMarch(p + n*SURF_DIST*2., l);
  if (d<length(lightPos-p)) dif *= .1;
  
  return dif;
}
mat2 Rot(float a) {
  float s=sin(a), c=cos(a);
  return mat2(c,-s,s,c);
}

vec3 GetColor(vec3 p, float t, int i) {
  // Sphere color
  if (length(p - vec3(0, 1, 6)) < 1.0) {
    return palette(t*.04 + float(i)*.005); 
  } 
  // Plane color with oscillating colors
  else if (p.y < SURF_DIST) {
    vec2 q = p.xz * 0.5;

    // Oscillate the coordinates over time
    q.x += sin(iTime * 2.0) * 0.5; 
    q.y += cos(iTime * 3.0) * 0.5;

    vec2 r = vec2(
      sin(q.x + q.y), 
      cos(q.x - q.y)
    );
    vec3 col = vec3(r * r, r.x * r.y);
    col = palette(col.r + t * 0.1 + float(i) * 0.02); 
    return col;
  }
  // Box color
  else if (sdBox(p - vec3(3.0, 1.0, 5.0), vec3(1.0, 1.0, 1.0)) < SURF_DIST) {
    return vec3(0.2, 0.8, 0.6); // Blueish
  }
  // Torus color
  else { 
    return vec3(0.8, 0.6, 0.2); // Orangeish
  }
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;
  vec2 mouse = (iMouse.xy/iResolution.xy) - .5;

  // Camera rotation
  vec3 ro = vec3(0, 2, 0); // Initial camera position
  float yaw = mouse.x * 3.14 * 2.; // Rotate around y-axis
  float pitch = mouse.y * 3.14; // Rotate around x-axis

  vec3 rd = normalize(vec3(uv, 1)); // Ray direction
  rd.yz *= Rot(pitch);
  rd.xz *= Rot(yaw);

  float t = RayMarch(ro, rd);
  int i = int(t * 10.0); // Estimate the number of steps

  vec3 p = ro + rd*t;
  float dif = GetLight(p);
  
  // Get color based on object and raymarching information
  vec3 color = GetColor(p, t, i) * dif; 
  
  // Reflections
  vec3 n = GetNormal(p);
  vec3 ref = reflect(rd, n);
  float k = 1.0;
  for(int i = 0; i < 4; i++) { // Reflection loop
    t = RayMarch(p + n*SURF_DIST*2., ref);
    p += ref * t;
    dif = GetLight(p);
    color += GetColor(p, t, i) * dif * k; 
    n = GetNormal(p);
    ref = reflect(ref, n);
    k *= .6; // Attenuate reflections
  }

  fragColor = vec4(color, 1.);
}